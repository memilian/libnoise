package libnoise.builder;

/// Implements a noise map, a 2-dimensional array of floating-point
/// values.
///
/// A noise map is designed to store coherent-noise values generated by a
/// noise module, although it can store values from any source. A noise
/// map is often used as a terrain height map or a grayscale texture.
///
/// The size (width and height) of the noise map can be specified during
/// object construction or at any other time.
///
/// The GetValue() and SetValue() methods can be used to access individual
/// values stored in the noise map.
///
/// <b>Border Values</b>
///
/// All of the values outside of the noise map are assumed to have a
/// common value known as the <i>border value</i>.
///
/// The GetValue() method returns the border value if the specified value
/// lies outside of the noise map.
class NoiseMap{

    /// The current width of the noise map.
    @:isVar public var width : Int;

    /// The current height of the noise map.
    @:isVar public var height : Int;

    /// Value used for all positions outside of the noise map.
    @:isVar public var borderValue : Float = 0;

    private var values : Array<Float> = [];

    public function new(width : Int, height : Int) {
        this.width = width;
        this.height = height;
    }

    /// Sets a value at a specified position in the noise map.
    ///
    /// @param x The x coordinate of the position.
    /// @param y The y coordinate of the position.
    /// @param value The value to set at the given position.
    ///
    /// This method does nothing if the noise map object is empty or the
    /// position is outside the bounds of the noise map.
    public inline function setValue (x : Int, y : Int, value : Float){
        if(x >= 0 && x <= width && y >= 0 && y <= height)
            values[x + width * y] = value;
    }

    /// Returns a value from the specified position in the noise map.
    ///
    /// @param x The x coordinate of the position.
    /// @param y The y coordinate of the position.
    ///
    /// @returns The value at that position.
    ///
    /// This method returns the border value if the coordinates exist
    /// outside of the noise map.
    public inline function getValue (x : Int, y : Int){
        if(x >= 0 && x <= width && y >= 0 && y <= height)
            return values[x + width * y];
        return borderValue;
    }
}